clear all;clc

% Define paths
moose_executable = '../../../../ferret-opt'; % location of ferret-opt (moose executable)
input_file_dir = '/Users/uconn/projects/ferret/MM/Paper3/Optimization/matlab/';
output_file_dir = '/Users/uconn/projects/ferret/MM/Paper3/Optimization/matlab/';
input_file_raw = fullfile(input_file_dir, '2D_SnSe_ecC_MM.i');
input_file = fullfile(input_file_dir, '2D_SnSe_ecC_MM_323K.i');
output_csv_path = fullfile(output_file_dir, '2D_SnSe_64gr_ecC_323K.csv'); % Output file from MOOSE

ecC_bulk = 952.3961; % unit: S/m
len_scale = 1e-9; % conversion from m to mm scale
T = 323; % temperature

ecC_eff_exp = 9315.6282; % Experimental electrical conductivity (S/m)

% Objective function to calculate percentage difference
objective_function = @(ecC_int_value) calc_percent_diff(input_file_raw,T, ecC_bulk, ecC_int_value,  ...
                                                        ecC_eff_exp, moose_executable,input_file_dir,  ...
                                                        input_file, output_csv_path, len_scale);

initial_guess = 8.83e4; % initial guess for ecC_int

% Perform the optimization using fminsearch
options = optimset('TolFun', 0.05,'TolX',15, 'MaxIter',15, 'MaxFunEvals',100,'Display','iter');

[optimal_ecC_int, final_diff] = fminsearch(objective_function, initial_guess, options);

% Display final optimized results
fprintf('Optimal ecC_int: %f\n', optimal_ecC_int);
fprintf('Final Objective Function Value (Percentage Difference): %f\n', final_diff);

%% Function to calculate percentage difference between simulated vs. experimental ecC
function percent_diff = calc_percent_diff(input_file_raw,T, ecC_bulk, ecC_int_value, ecC_eff_exp, ...
                                          moose_executable, input_file_dir, input_file, ...
                                          output_csv_path, len_scale)
    % Modify the input file
    modify_input_file(input_file_raw,T, ecC_bulk, len_scale, ecC_int_value, input_file);

    % Run the MOOSE job
    run_moose_job(moose_executable, input_file);

    % Calculate the new ecC_eff based on MOOSE job output
    ecC_eff = calculate_ecC_eff(output_csv_path, len_scale);

    % Compute the percentage difference
    percent_diff = abs(ecC_eff - ecC_eff_exp) * 100 / ecC_eff_exp;

    % Display percentage difference
    fprintf('Error (%%): %f\n', percent_diff);
end

%% Function to modify ecC_int in the input file
function modify_input_file(input_file_raw,T, ecC_bulk,len_scale,ecC_int_value, input_file)

    % Read and replace the variables in the input file
    filetext = fileread(input_file_raw);
    filetext = strrep(filetext, 'ecC_bulk', num2str(ecC_bulk));
    filetext = strrep(filetext, 'len_scale', num2str(len_scale));
    filetext = strrep(filetext, 'ecC_int', num2str(ecC_int_value));
    filetext = strrep(filetext, 'def_T', num2str(T));

    % Write the modified file
    fid = fopen(input_file, 'w');
    fprintf(fid, '%s', filetext);
    fclose(fid);

    fprintf('New ecC_int value set to: %f\n', ecC_int_value);
end

%% Function to run the MOOSE job
function run_moose_job(moose_executable, input_file)

    command = sprintf('%s -i %s', moose_executable, input_file);
    [status, cmdout] = system(command);
    if status == 0
        fprintf('MOOSE job executed successfully.\n');
        disp(cmdout);
    else
        fprintf('Error in executing MOOSE job.\n');
        disp(cmdout);
    end
end

%% Function to calculate ecC_eff from MOOSE job output
function ecC_eff = calculate_ecC_eff(output_csv_path, len_scale)

    % Load the CSV file generated by MOOSE (output file)
    data_out = readtable(output_csv_path);
    qx_ave = data_out{1, 4};
    qy_ave = data_out{1, 5};
    left_V = data_out{1, 3};
    right_V = data_out{1, 6};

    dV = right_V - left_V;
    dx = 160e-6; % Unit: mm, 160e-6 mm for 2D, 80e-6 mm for 3D
    j_tot = sqrt(qx_ave^2 + qy_ave^2);

    % Compute effective ecC
    ecC_eff = -j_tot * dx / (len_scale * dV);
end
